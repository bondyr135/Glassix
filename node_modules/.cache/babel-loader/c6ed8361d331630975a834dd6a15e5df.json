{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar isString_1 = tslib_1.__importDefault(require(\"lodash/isString\"));\n\nvar isArray_1 = tslib_1.__importDefault(require(\"lodash/isArray\"));\n\nvar is_ip_1 = tslib_1.__importDefault(require(\"is-ip\"));\n\nvar axios_1 = tslib_1.__importDefault(require(\"axios\"));\n\nvar url_join_1 = tslib_1.__importDefault(require(\"url-join\"));\n\nvar lru_cache_1 = tslib_1.__importDefault(require(\"lru-cache\"));\n\nvar CACHE_MAX = 4096; // max number of items\n\nvar CACHE_MAX_AGE = 1000 * 60 * 60 * 24; // 24 hours\n\nvar DEFAULT_IP = 'DEFAULT_IP';\nvar VALID_FIELDS = ['ip', 'is_eu', 'city', 'region', 'region_code', 'country_name', 'country_code', 'continent_name', 'continent_code', 'latitude', 'longitude', 'asn', 'organisation', 'postal', 'calling_code', 'flag', 'emoji_flag', 'emoji_unicode', 'carrier', 'languages', 'currency', 'time_zone', 'threat', 'count', 'status'];\nvar BASE_URL = 'https://api.ipdata.co/';\n\nfunction isValidIP(ip) {\n  return ip === DEFAULT_IP || is_ip_1.default(ip);\n}\n\nfunction isValidSelectField(field) {\n  var index = VALID_FIELDS.indexOf(field);\n\n  if (index === -1) {\n    throw new Error(field + \" is not a valid field.\");\n  }\n\n  return true;\n}\n\nfunction isValidFields(fields) {\n  if (!isArray_1.default(fields)) {\n    throw new Error('Fields should be an array.');\n  }\n\n  fields.forEach(function (field) {\n    var index = VALID_FIELDS.indexOf(field);\n\n    if (index === -1) {\n      throw new Error(field + \" is not a valid field.\");\n    }\n  });\n  return true;\n}\n\nvar IPData =\n/** @class */\nfunction () {\n  function IPData(apiKey, cacheConfig) {\n    if (!isString_1.default(apiKey)) {\n      throw new Error('An API key is required.');\n    }\n\n    this.apiKey = apiKey;\n    this.cache = new lru_cache_1.default(tslib_1.__assign({\n      max: CACHE_MAX,\n      maxAge: CACHE_MAX_AGE\n    }, cacheConfig));\n  }\n\n  IPData.prototype.lookup = function (ip, selectField, fields) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var params, url, response, data, e_1, response;\n\n      var _a;\n\n      return tslib_1.__generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            params = {\n              'api-key': this.apiKey\n            };\n            url = ip ? url_join_1.default(BASE_URL, ip) : BASE_URL;\n\n            if (ip && !isValidIP(ip)) {\n              throw new Error(ip + \" is an invalid IP address.\");\n            }\n\n            if (this.cache.has(ip || DEFAULT_IP)) {\n              return [2\n              /*return*/\n              , this.cache.get(ip || DEFAULT_IP)];\n            }\n\n            if (selectField && fields) {\n              throw new Error('The selectField and fields parameters cannot be used at the same time.');\n            }\n\n            if (selectField && isValidSelectField(selectField)) {\n              url = url_join_1.default(url, selectField);\n            }\n\n            if (fields && isValidFields(fields)) {\n              params.fields = fields.join(',');\n            }\n\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , axios_1.default.get(url, {\n              params: params\n            })];\n\n          case 2:\n            response = _b.sent();\n            data = tslib_1.__assign(tslib_1.__assign({}, response.data), {\n              status: response.status\n            });\n\n            if (selectField) {\n              data = (_a = {}, _a[selectField] = response.data, _a.status = response.status, _a);\n            }\n\n            this.cache.set(ip || DEFAULT_IP, data);\n            return [2\n            /*return*/\n            , this.cache.get(ip || DEFAULT_IP)];\n\n          case 3:\n            e_1 = _b.sent();\n            response = e_1.response;\n\n            if (response) {\n              return [2\n              /*return*/\n              , tslib_1.__assign(tslib_1.__assign({}, response.data), {\n                status: response.status\n              })];\n            }\n\n            throw e_1;\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  IPData.prototype.bulkLookup = function (ips, fields) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var params, responses, bulk, response_1, e_2, response;\n\n      var _this = this;\n\n      return tslib_1.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            params = {\n              'api-key': this.apiKey\n            };\n            responses = [];\n            bulk = [];\n\n            if (ips.length < 2) {\n              throw new Error('Bulk Lookup requires more than 1 IP Address in the payload.');\n            }\n\n            ips.forEach(function (ip) {\n              if (!isValidIP(ip)) {\n                throw new Error(ip + \" is an invalid IP address.\");\n              }\n\n              if (_this.cache.has(ip)) {\n                responses.push(_this.cache.get(ip));\n              } else {\n                bulk.push(ip);\n              }\n            });\n\n            if (fields && isValidFields(fields)) {\n              params.fields = fields.join(',');\n            }\n\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 4,, 5]);\n\n            if (!(bulk.length > 0)) return [3\n            /*break*/\n            , 3];\n            return [4\n            /*yield*/\n            , axios_1.default.post(url_join_1.default(BASE_URL, 'bulk'), bulk, {\n              params: params\n            })];\n\n          case 2:\n            response_1 = _a.sent();\n            response_1.data.forEach(function (info) {\n              _this.cache.set(info.ip, tslib_1.__assign(tslib_1.__assign({}, info), {\n                status: response_1.status\n              }));\n\n              responses.push(_this.cache.get(info.ip));\n            });\n            _a.label = 3;\n\n          case 3:\n            return [2\n            /*return*/\n            , responses];\n\n          case 4:\n            e_2 = _a.sent();\n            response = e_2.response;\n\n            if (response) {\n              return [2\n              /*return*/\n              , tslib_1.__assign(tslib_1.__assign({}, response.data), {\n                status: response.status\n              })];\n            }\n\n            throw e_2;\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  return IPData;\n}();\n\nexports.default = IPData;","map":null,"metadata":{},"sourceType":"script"}